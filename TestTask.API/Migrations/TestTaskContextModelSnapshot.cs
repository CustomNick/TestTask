// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestTask.Core.EF;

namespace TestTask.API.Migrations
{
    [DbContext(typeof(TestTaskContext))]
    partial class TestTaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TestTask.Data.Entities.ConsumerObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<long>("OrganisationId")
                        .HasColumnName("organisation_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("consumer_objects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Consumer object 1 address",
                            Name = "ПС 110/10 Весна",
                            OrganisationId = 2L
                        });
                });

            modelBuilder.Entity("TestTask.Data.Entities.DeliveryPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MaxPower")
                        .HasColumnName("max_power")
                        .HasColumnType("integer");

                    b.Property<string>("MeteringDeviceName")
                        .IsRequired()
                        .HasColumnName("metering_device_name")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("delivery_points");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MaxPower = 1000,
                            MeteringDeviceName = "Metering device 1",
                            Name = "Delivery point 1"
                        },
                        new
                        {
                            Id = 2L,
                            MaxPower = 2000,
                            MeteringDeviceName = "Metering device 2",
                            Name = "Delivery point 2"
                        });
                });

            modelBuilder.Entity("TestTask.Data.Entities.Measure", b =>
                {
                    b.Property<DateTimeOffset>("MeasureDate")
                        .HasColumnName("measure_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MeasuringPointId")
                        .HasColumnName("measuring_point_id")
                        .HasColumnType("bigint");

                    b.Property<long>("DeliveryPointId")
                        .HasColumnName("delivery_point_id")
                        .HasColumnType("bigint");

                    b.HasKey("MeasureDate", "MeasuringPointId", "DeliveryPointId");

                    b.HasIndex("DeliveryPointId");

                    b.HasIndex("MeasuringPointId");

                    b.ToTable("measures");

                    b.HasData(
                        new
                        {
                            MeasureDate = new DateTimeOffset(new DateTime(2023, 8, 8, 12, 42, 49, 227, DateTimeKind.Unspecified).AddTicks(9930), new TimeSpan(0, 0, 0, 0, 0)),
                            MeasuringPointId = 1L,
                            DeliveryPointId = 1L
                        },
                        new
                        {
                            MeasureDate = new DateTimeOffset(new DateTime(2018, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MeasuringPointId = 2L,
                            DeliveryPointId = 2L
                        });
                });

            modelBuilder.Entity("TestTask.Data.Entities.MeasuringPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ConsumerObjectId")
                        .HasColumnName("consumer_object_id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CounterCheckDate")
                        .HasColumnName("counter_check_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CounterNumber")
                        .HasColumnName("counter_number")
                        .HasColumnType("bigint");

                    b.Property<short>("CounterType")
                        .HasColumnName("counter_type")
                        .HasColumnType("smallint");

                    b.Property<float>("CurrentTransformatorCoefficient")
                        .HasColumnName("current_transformator_coefficient")
                        .HasColumnType("real");

                    b.Property<long>("CurrentTransformatorNumber")
                        .HasColumnName("current_transformator_number")
                        .HasColumnType("bigint");

                    b.Property<short>("CurrentTransformatorType")
                        .HasColumnName("current_transformator_type")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CurrentTransormatorCheckDate")
                        .HasColumnName("current_transformator_check_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<float>("VoltageTransformatorCoefficient")
                        .HasColumnName("voltage_transformator_coefficient")
                        .HasColumnType("real");

                    b.Property<long>("VoltageTransformatorNumber")
                        .HasColumnName("voltage_transformator_number")
                        .HasColumnType("bigint");

                    b.Property<short>("VoltageTransformatorType")
                        .HasColumnName("voltage_transformator_type")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("VoltageTransormatorCheckDate")
                        .HasColumnName("voltage_transformator_check_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerObjectId");

                    b.ToTable("measuring_points");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConsumerObjectId = 1L,
                            CounterCheckDate = new DateTimeOffset(new DateTime(2023, 8, 8, 12, 42, 49, 225, DateTimeKind.Unspecified).AddTicks(7491), new TimeSpan(0, 0, 0, 0, 0)),
                            CounterNumber = 1L,
                            CounterType = (short)1,
                            CurrentTransformatorCoefficient = 0.8f,
                            CurrentTransformatorNumber = 1L,
                            CurrentTransformatorType = (short)1,
                            CurrentTransormatorCheckDate = new DateTimeOffset(new DateTime(2023, 8, 8, 12, 42, 49, 225, DateTimeKind.Unspecified).AddTicks(8940), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Measuring point 1",
                            VoltageTransformatorCoefficient = 0.7f,
                            VoltageTransformatorNumber = 1L,
                            VoltageTransformatorType = (short)1,
                            VoltageTransormatorCheckDate = new DateTimeOffset(new DateTime(2023, 8, 8, 12, 42, 49, 226, DateTimeKind.Unspecified).AddTicks(596), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ConsumerObjectId = 1L,
                            CounterCheckDate = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CounterNumber = 1L,
                            CounterType = (short)2,
                            CurrentTransformatorCoefficient = 0.8f,
                            CurrentTransformatorNumber = 1L,
                            CurrentTransformatorType = (short)2,
                            CurrentTransormatorCheckDate = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Measuring point 2",
                            VoltageTransformatorCoefficient = 0.7f,
                            VoltageTransformatorNumber = 1L,
                            VoltageTransformatorType = (short)2,
                            VoltageTransormatorCheckDate = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("TestTask.Data.Entities.Organisation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<long?>("ParentOrganisationId")
                        .HasColumnName("parent_organisation_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentOrganisationId");

                    b.ToTable("organisations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Address 1",
                            Name = "Organisation 1"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Address 1",
                            Name = "Organisation 1",
                            ParentOrganisationId = 1L
                        });
                });

            modelBuilder.Entity("TestTask.Data.Entities.ConsumerObject", b =>
                {
                    b.HasOne("TestTask.Data.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTask.Data.Entities.Measure", b =>
                {
                    b.HasOne("TestTask.Data.Entities.DeliveryPoint", "DeliveryPoint")
                        .WithMany()
                        .HasForeignKey("DeliveryPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Data.Entities.MeasuringPoint", "MeasuringPoint")
                        .WithMany()
                        .HasForeignKey("MeasuringPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTask.Data.Entities.MeasuringPoint", b =>
                {
                    b.HasOne("TestTask.Data.Entities.ConsumerObject", "ConsumerObject")
                        .WithMany()
                        .HasForeignKey("ConsumerObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestTask.Data.Entities.Organisation", b =>
                {
                    b.HasOne("TestTask.Data.Entities.Organisation", "ParentOrganisation")
                        .WithMany()
                        .HasForeignKey("ParentOrganisationId");
                });
#pragma warning restore 612, 618
        }
    }
}
